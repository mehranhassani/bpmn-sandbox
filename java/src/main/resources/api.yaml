swagger: "2.0"
info:
  version: "1.0"
  title: "Java Docker"
host: "unctad.redfunction.ee"
basePath: "/java/v2016/06"
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /engine-rest/engine/default/process-definition:
    get:
      description: "Return list of process definitions."
      operationId: "getProcessDefinitionList"
      responses:
        200:
          description: Returns process definitions.
          schema:
            type: array
            items:
              $ref: "#/definitions/ProcessDefinition"
        400:
          description: "Invalid parameters."  
  /engine-rest/engine/default/process-definition/count:
    get:
      description: "Return count of process definitions."
      operationId: "getProcessDefinitionCount"
      responses:
        200:
          description: Returns count of process definitions.
          schema: 
            $ref: "#/definitions/Count"
        400:
          description: "Invalid parameters." 
  /engine-rest/engine/default/process-definition/{processDefinitionId}/start:
    post:
      description: "Instantiates a given process definition."
      operationId: "startProcess"
      parameters: 
        - name: processDefinitionId
          in: path
          type: string
          description: "processDefinitionId"
          required: true
      responses:
        200:
          description: Returns the taskId.
          schema: 
            $ref: "#/definitions/TaskId"
        400:
          description: "Invalid parameters." 
  /engine-rest/engine/default/task:
    get:
      description: "Return list of opened tasks."
      operationId: "getTaskList"
      responses:
        200:
          description: Returns list of tasks.
          schema:
            type: array
            items:
              $ref: "#/definitions/ProcessTask"
        400:
          description: "Invalid parameters."  
  /task/{taskId}:
    get: 
      description: "Return a task form."
      operationId: "GetTaskForm"
      parameters: 
        - name: taskId
          in: path
          type: string
          description: "taskId"
          required: true
      responses:
        200:
          description: Returns the submission.
          schema:
            type: string
        401:
          description: "Unauthorized."  
        404:
          description: "Resource not found."  
        500:
          description: "An error has occurred."
  /task/submission/{taskId}:
    post: 
      description: "Validates and saves the data"
      operationId: "saveTaskSubmission"
      parameters: 
        - name: taskId
          in: path
          type: string
          required: true
          description: "The task ID."
        - name: formData
          in: formData
          description: "data model"
          required: true
      responses: 
        "201":
          description: "The resource has been created."
        "400":
          description: "An error has occured trying to create the resource."
        "401":
          description: "Unauthorized. Note that anonymous submissions are *enabled* by default."
    get: 
      description: "Return a specific submission data."
      operationId: "Gets task submission"
      parameters:
        - name: taskId
          in: path
          type: string
          required: true
          description: The task ID.
      responses:
        200:
          description: Returns the submission.
          schema:
            type: string
        401:
          description: "Unauthorized."  
        404:
          description: "Resource not found."  
        500:
          description: "An error has occurred."
  /hello/{user}:
    get:
      description: Returns a greeting to the user!
      parameters:
        - name: user
          in: path
          type: string
          required: true
          description: The name of the user to greet.
      responses:
        200:
          description: Returns the greeting.
          schema:
            type: string
        400:
          description: Invalid characters in "user" were provided.
  /book:
    get:
      description: Returns a a book!
      responses:
        200:
          description: Returns a book.
          schema:
            $ref: "#/definitions/Book"
    post: 
      description: "Creates a new book in the store. "
      operationId: "saveBook"
      parameters: 
        - name: book
          in: body
          description: "save book"
          required: true
          schema: 
            $ref: "#/definitions/Book"
      responses: 
        "200":
          description: "book response"
          schema: 
            $ref: "#/definitions/Book"
        default: 
          description: "unexpected error"
          schema: 
            $ref: "#/definitions/ErrorModel"
definitions:
    ProcessDefinition:
      type: "object"
      properties:
        id:
          type: string
        key:
          type: string
        category:
          type: string
        description:
          type: string
        name:
          type: string
    ProcessTask:
      type: "object"
      properties:
        id:
          type: string
        name:
          type: string
        assignee:
          type: string
        owner:
          type: string
        created:
          type: string
        description:
           type: string
    TaskForm:
      type: "object"
      properties:
        key:
          type: string
        contextPath:
          type: string
    Count:
      type: "object"
      properties:
        count:
          type: number
    TaskId:
      type: "object"
      properties:
        id:
          type: string
    Submission:
      type: "object"
    Book:
      type: "object"
      required: 
        - "title"
      properties: 
       id: 
        type: string
        description: "Unique ID for this book"
       title:
        type: string
        description: "Book title"
       author:
        type: string
        description: "Author name"
    ErrorModel: 
      type: "object"
      required: 
        - "code"
        - "message"
      properties: 
        code: 
          type: "integer"
          format: "int32"
        message: 
          type: "string"